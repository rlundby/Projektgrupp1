swagger: '2.0'
info:
  description: >-
    Projektarbete - Linnea Agetorp, Ellinor Danielsson, Joakim Jonsson, Rickard
    Lundby, Basheer Ghlawanji
  version: 1.0.0
  title: Projektgrupp 1 - NodeJS
  contact:
    name: the team
    email: rickardlundby@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /api/
host: 'localhost:3001'
tags:
  - name: Transaction
    description: Endpoints relatade to transactions api
  - name: Sold items
    description: Endpoints relatade to getting sold items
  - name: Orders
    description: 'Endpoints relatade to getting orders'
paths:
  /add-transactions:
    post:
      tags:
        - Transaction
      summary: Adds a new transaction to the database
      description: >-
        This will create a new transaction in the system. Please note that it
        will be automatically counted as the LATEST TRANSACTION.
      operationId: addTransaction
      parameters:
        - in: body
          name: body
          description: Create a transaction with the body
          required: true
          schema:
            $ref: '#/definitions/Transaction'
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Transaction successfully added
        '500':
          description: Failed to add transaction
  /transactions:
    get:
      tags:
        - Transaction
      summary: Gets the 5 latest transactions
      description: >-
        This will return the 5 latest transactions from the database, given that
        no one has added them in the wrong order. :)
      operationId: getLatestTransaction
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successfully got the transations
        '500':
          description: Failed to get transactions
  /update-transactions:
    put:
      tags:
        - Transaction
      summary: Gets the 5 latest transactions
      description: >-
        This will update the transaction with the id you put in the path. Make
        sure to use the ID for the transaction which is returned from the get.
      operationId: updateTransaction
      parameters:
        - in: path
          name: userId
          type: integer
          required: true
          description: Numeric ID of which transaction to update.
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Successfully got the transations
        '500':
          description: Failed to get transactions
  /sold-items:
    get:
      tags:
        - Sold items
      summary: Adds a new transaction to the database
      description: >-
        This will create a new transaction in the system. Please note that it
        will be automatically counted as the LATEST TRANSACTION.
      operationId: getSoldItems
      produces:
        - application/json
        - application/xml
      responses:
        '200':
          description: Got sold items
          schema:
            $ref: '#/definitions/SoldItem'
        '500':
          description: Failed to get sold items
  /get-latest-orders:
    get:
      tags:
        - Orders
      summary: 'Gets the 6 latest orders'
      description:
        'This will return the 6 latest orders from the database.'
      operationId: getLatestOrders
      produces:
        - application/json
      responses:
        '200':
          description: 'Successfully got the orders'
        '500':
          description: 'Failed to get orders'
  /get-total-orders:
    get:
      tags:
        - Orders
      summary: 'Gets the total amount of orders'
      description: 'This will return a number that represents the total amount of orders'
      operationId: getTotalOrders
      produces:
        - application/json
      responses:
        '200':
          description: 'Successfully got the total amount of orders'
        '500':
          description: 'Failed to get orders'

  /messages:
    get:
      tags:
        - Messages
      summary: 'Gets the 6 latest messages'
      description:
        'This will return the 6 latest messages from the database.'
      operationId: getLatestMessages
      produces:
        - application/json
      responses:
        '200':
          description: 'Successfully got the messages'
        '500':
          description: 'Failed to get messages'
  /yearly:
    get:
      tags:
        - Email sent
      summary: 'Get all yearly income data.'
      description:
        'This will return all income data by year.'
      operationId: getYearly
      produces:
      - application/json
      responses:
        '200':
          description: 'successfully recived the data'
        '500':
          description: 'Failed to get data'
  /yearlyGraph:
    get:
      tags:
        - Graph data
      summary: 'Gets all yearly income statistics data'
      description:
        'This will return all statistics data'
      operationId: getYearlyGraph
      produces:
      - application/json
      responses:
        '200':
          description: 'successfully recived the data'
        '500':
          description: 'Failed to get data'

  /signup:
    post:
      tags:
        - User
      summary: 'Sign up new user'
      description:
        'This will save the new user to the database.'
      operationId: signup
      parameters:
        - in: body
          name: body
          description: Create a new user with the body
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        '201':
          description: 'Successfully created user'
        '500':
          description: 'Failed to create user'
  /signin:
    post:
      tags:
        - User
      summary: 'Sign in user'
      description:
        'This will give the user authentication to enter our site, if the user exists in the database and enters correct username and password'
      operationId: signin
      parameters:
        - in: body
          name: body
          description: Sign in user with username and password
          required: true
          schema:
            $ref: '#/definitions/SigninUser'
      produces:
        - application/json
      responses:
        '200':
          description: 'Successfully signed in user'
        '500':
          description: 'Failed to sign in user'
  /testimonials:
      get:
        tags:
          - Testimonials
        summary: 'Gets one randomized testimonial'
        description:
          'This will return one testimonial'
        operationId: getTestimonial
        produces:
          - application/json
        responses:
          '200':
            description: 'Successfully got testimonial'
          '500':
            description: 'Failed to get testimonials'

definitions:
  User:
    type: object
    properties:
      id:
        type: integer
        format: int64
      email:
        type: string
      password:
        type: string
      userName:
        type: string
      created:
        type: string
      modified:
        type: string
  SigninUser:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
  Product:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      price:
        type: number
        format: int32
  Earnings:
    type: object
    properties:
      id:
        type: integer
        format: int64
      month:
        type: integer
        format: int32
      year:
        type: number
        format: int32
      marketplace:
        type: number
        format: int32
      instore:
        type: number
        format: int32
      total:
        type: number
        format: int32
  Message:
    type: object
    properties:
      id:
        type: integer
        format: int64
      title:
        type: string
      content:
        type: string
      sentFrom:
        type: string
      created:
        type: string
  Yearly:
    type: object
    properties:
      id:
        type: integer
        format: int64
      market:
        type: integer
        format: int32
      income:
        type: integer
        format: int32
      year:
        type: integer
        format: int32
      month:
        type: integer
        format: int32
  YearlyGraph:
    type: object
    properties:
      id:
        type: integer
        format: int64
      y:
        type: integer
        format: int32
      a:
        type: integer
        format: int32
      b:
        type: integer
        format: int32
      c:
        type: integer
        format: int32
  SoldItem:
    type: object
    properties:
      month:
        type: integer
        format: int32
      year:
        type: number
        format: int32
      instore:
        type: number
        format: int32
      download:
        type: number
        format: int32
      marketplace:
        type: number
        format: int32
  Transaction:
    type: object
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
      status:
        type: string
      amount:
        type: number
        format: int32
      date:
        type: string
      modified:
        type: string
  Order:
    type: object
    properties:
      id:
        type: integer
        format: int64
      date:
        type: string
      status:
        type: string
      products:
        type: array
        items:
          type: object
      customer:
        type: object
      totalcost:
        type: integer
        format: int32
  Testimonial:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        quote:
          type: string
        jobTitle:
          type: string